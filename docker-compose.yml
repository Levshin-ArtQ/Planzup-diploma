version: "3.7"
x-postgres-common:
  &postgres-common
  image: postgres:14-alpine
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U user --dbname=postgres'
    interval: 10s
    timeout: 5s
    retries: 5


services:
  postgres_primary:
    <<: *postgres-common
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: user
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - ./00_init.sql:/docker-entrypoint-initdb.d/00_init.sql
      - postgres_primary_data:/var/lib/postgresql/data

  postgres_replica:
    <<: *postgres-common
    ports:
      - 5433:5432
    environment:
      PGDATA: /var/lib/postgresql/data/dbfiles_
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      if [ ! -s /var/lib/postgresql/data/dbfiles_/PG_VERSION ]; then
        rm -rf /var/lib/postgresql/data/dbfiles_/*
        until pg_basebackup --pgdata=/var/lib/postgresql/data/dbfiles_ -R --slot=replication_slot --host=postgres_primary --port=5432
        do
        echo 'Waiting for primary to connect...'
        sleep 1s
        done
        echo 'Backup done, starting replica...'
        chmod 0700 /var/lib/postgresql/data/dbfiles_
      fi
      postgres
      "
    depends_on:
      - postgres_primary
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data

  nginx:
    depends_on:
      - api
      - client
      - notifications
    restart: always
    build:
      dockerfile: Dockerfile.dev
      context: ./nginx
    ports:
      - "3052:80"
  api:
    build:
      dockerfile: Dockerfile.dev
      context: "./server"
    volumes:
      - /app/node_modules
      - ./server:/app
    environment:
      - PGUSER=user
      - PGHOST=postgres_primary
      - PGDATABASE=postgres
      - PGPASSWORD=postgres_password
      - PGPORT=5432
      - TGBOTTOKEN=6451579789:AAGc0DThN5YKKLBL5FoXDdAlvnm1k9TmSi4
    depends_on:
      postgres_primary:
        condition: service_healthy

  notifications:
    build:
      dockerfile: Dockerfile.dev
      context: "./notifications-worker"
    volumes:
      - /app/node_modules
      - ./notifications-worker:/app
    environment:
      - PGUSER=replicator
      - PGHOST=postgres_replica
      - PGDATABASE=postgres
      - PGPASSWORD=replicator_password
      - PGPORT=5433
      - TGBOTTOKEN=6451579789:AAGc0DThN5YKKLBL5FoXDdAlvnm1k9TmSi4
    depends_on:
      postgres_replica:
        condition: service_healthy

  bot:
    build:
      dockerfile: Dockerfile.dev
      context: "./bot"
    volumes:
      - /app/node_modules
      - ./bot:/app
    environment: 
      - PGUSER=replicator
      - PGHOST=postgres_replica
      - PGDATABASE=postgres
      - PGPASSWORD=replicator_password
      - PGPORT=5433
      - TGBOTTOKEN=6451579789:AAGc0DThN5YKKLBL5FoXDdAlvnm1k9TmSi4

  client:
    stdin_open: true
    environment:
      - CHOKIDAR_USEPOLLING=true
    build:
      dockerfile: Dockerfile.dev
      context: ./client
    volumes:
      - /app/node_modules
      - ./client:/app

volumes:
  postgres_primary_data:
  postgres_replica_data: