import { Link } from "react-router-dom";
import { Button, TimePicker, Select, DatePicker, Modal, Spin } from "antd";
import { useState } from "react";
import useLocation from "../hooks/useLocation";
import { YMaps, Map, Circle, GeolocationControl } from "@pbe/react-yandex-maps";
import "./Search.css";

const Search = () => {
  const [openModal, setOpenModal] = useState(false);
  const [serviceOptions, setServiceOptions] = useState([]);
  const [serviceValue, setServiceValue] = useState("");
  const [dateValue, setDateValue] = useState("");
  const [timeValue, setTimeValue] = useState("");

  const { location, error, loading, handleLocationClick } = useLocation();

  const handleLocation = () => {
    console.log(location);
    handleLocationClick();
    setOpenModal(!openModal);
  };
  const onServiceChange = (value) => {
    setServiceValue(value);
  };
  const handleOk = () => {
    setOpenModal(!openModal);
  };
  const handleCancel = () => {
    setOpenModal(!openModal);
  };

  const serviceOptioins = [
    {
      label: "–í—Å–µ —É—Å–ª—É–≥–∏",
      value: "all",
    },
    { label: "–ù–æ–≥—Ç–∏", value: "nails", emoji: "üíÖ" },
    { label: "–ú–∞–Ω–∏–∫—é—Ä", value: "manicure", emoji: "üíÖ" },
    { label: "–ü–µ–¥–∏–∫—é—Ä", value: "pedicure", emoji: "üíÖ" },
    { label: "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏", value: "hair_services", emoji: "üíá" },
    { label: "–°—Ç—Ä–∏–∂–∫–∞ –º—É–∂—Å–∫–∞—è", value: "haircut_men", emoji: "üíáüèª‚Äç‚ôÇÔ∏è" },
    { label: "–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è", value: "haircut_women", emoji: "üíá‚Äç‚ôÄÔ∏è" },
    { label: "–£–∫–ª–∞–¥–∫–∞", value: "styling", emoji: "üíÅ" },
    { label: "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ", value: "coloring", emoji: "üé®" },
    { label: "–ë—Ä–æ–≤–∏ –∏ —Ä–µ—Å–Ω–∏—Ü—ã", value: "brows_lashes", emoji: "üëÅÔ∏è" },
    { label: "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –±—Ä–æ–≤–µ–π", value: "brow_shaping", emoji: "üëÅÔ∏è‚Äçüó®Ô∏è" },
    { label: "–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü", value: "lash_lamination", emoji: "üëÅÔ∏è" },
    { label: "–ú–∞–∫–∏—è–∂", value: "makeup", emoji: "üíÑ" },
    { label: "–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –º–∞–∫–∏—è–∂", value: "permanent_makeup", emoji: "üíã" },
    { label: "–£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π", value: "skincare", emoji: "üíÜ" },
    { label: "–ß–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞", value: "facial_cleaning", emoji: "üßñ" },
    { label: "–ú–∞—Å—Å–∞–∂", value: "massage", emoji: "üíÜ‚Äç‚ôÇÔ∏è" },
    { label: "–ê—Ä–æ–º–∞—Ç–µ—Ä–∞–ø–∏—è", value: "aromatherapy", emoji: "üå∏" },
    { label: "–≠–ø–∏–ª—è—Ü–∏—è", value: "hair_removal", emoji: "ü™í" },
    { label: "–õ–∞–∑–µ—Ä–Ω–∞—è —ç–ø–∏–ª—è—Ü–∏—è", value: "laser_hair_removal", emoji: "üî¶" },
    { label: "–í–æ—Å–∫–æ–≤–∞—è —ç–ø–∏–ª—è—Ü–∏—è", value: "waxing", emoji: "üïØÔ∏è" },
    { label: "–®—É–≥–∞—Ä–∏–Ω–≥", value: "sugaring", emoji: "üçØ" },
    { label: "–°–ø–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã", value: "spa_treatments", emoji: "üßñ‚Äç‚ôÄÔ∏è" },
    { label: "–†–µ–ª–∞–∫—Å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã", value: "relaxation_treatments", emoji: "üåø" },
    { label: "–û–±–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ", value: "body_wrapping", emoji: "üß¥" },
    {
      label: "–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π –º–∞—Å—Å–∞–∂",
      value: "anti_cellulite_massage",
      emoji: "üëê",
    },
    { label: "–ü–∏–ª–∏–Ω–≥", value: "peeling", emoji: "üåπ" },
    { label: "–ë–∏–æ—ç–ø–∏–ª—è—Ü–∏—è", value: "bio_epilation", emoji: "üçÉ" },
    { label: "–ì–æ–ª–ª–∏–≤—É–¥—Å–∫–∏–µ –ª–æ–∫–æ–Ω—ã", value: "hollywood_curls", emoji: "üåü" },
    { label: "–ö–∞—Ä–≤–∏–Ω–≥", value: "carving", emoji: "üîÑ" },
    {
      label: "–ö–µ—Ä–∞—Ç–∏–Ω–æ–≤–æ–µ –≤—ã–ø—Ä—è–º–ª–µ–Ω–∏–µ",
      value: "keratin_straightening",
      emoji: "‚ú®",
    },
    { label: "–ë–æ—Ç–æ–∫—Å –¥–ª—è –≤–æ–ª–æ—Å", value: "hair_botox", emoji: "üíâ" },
    { label: "–£—Ö–æ–¥ –∑–∞ –±–æ—Ä–æ–¥–æ–π", value: "beard_care", emoji: "üßî" },
    { label: "–ü–∏—Ä—Å–∏–Ω–≥", value: "piercing", emoji: "üíé" },
    { label: "–¢–∞—Ç—É–∏—Ä–æ–≤–∫–∏", value: "tattoos", emoji: "üñãÔ∏è" },
  ];
  const masterOptions = [
    { label: "–ù–∏–∫–æ–ª–∞–π", value: "Nikolay" },
    { label: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", value: "Alexandr" },
    { label: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞", value: "Alexandra" },
    { label: "–ê–ª–µ–∫—Å–µ–∏ÃÜ", value: "Alexey" },
    { label: "–ê–Ω–Ω–∞", value: "Anna" },
    { label: "–í–∞–ª–µ–Ω—Ç–∏–Ω", value: "Valentin" },
    { label: "–í–∞–ª–µ—Ä–∏—è", value: "Valeria" },
    { label: "–í–∏–∫—Ç–æ—Ä", value: "Viktor" },
    { label: "Elena", value: "Elena" },
    { label: "Alex", value: "Alex" },
  ];

  return (
    <div className="search_bar">
      <Modal open={openModal} onOk={handleOk} onCancel={handleCancel}>
        <p>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ</p>
        <div>
          {loading ? (
            <Spin size="large" />
          ) : error ? (
            <div>{error}</div>
          ) : location ? (
            <div>
              {location?.latitude} {location?.longitude}
              <YMaps>
                <div className="dfc">
                  <span className="sub_map">
                    {" "}
                    –ó–¥–µ—Å—å —Å–∫–æ—Ä–æ –Ω–∞–π–¥—É—Ç—Å—è –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:
                  </span>
                  <div className="map_wrapper">
                    <Map
                      defaultState={{
                        center: [location?.latitude, location?.longitude],
                        zoom: 15,
                      }}
                    >
                      <GeolocationControl options={{ float: "left" }} />
                      <Circle
                        geometry={[[55.160372, 61.370303], 300]}
                        options={{
                          draggable: true,
                          fillColor: "#DB709377",
                          strokeColor: "#990066",
                          strokeOpacity: 0.8,
                          strokeWidth: 5,
                        }}
                      />
                    </Map>
                  </div>
                </div>
              </YMaps>
            </div>
          ) : null}
        </div>
      </Modal>
      <Select
        options={masterOptions}
        filterOption={(input, option) =>
          (option?.label.toLocaleLowerCase() ?? "").includes(
            input.toLowerCase()
          )
        }
        showSearch
        optionFilterProp="children"
        filterSort={(optionA, optionB) =>
          (optionA?.label ?? "")
            .toLowerCase()
            .localeCompare((optionB?.label ?? "").toLowerCase())
        }
        defaultValue="–ü–æ –º–∞—Å—Ç–µ—Ä—É"
        placeholder="–ü–æ –º–∞—Å—Ç–µ—Ä—É"
        variant="borderless"
      />
      <Select
        options={serviceOptioins}
        onChange={onServiceChange}
        showSearch
        defaultValue="–ü–æ —É—Å–ª—É–≥–µ"
        placeholder="–ü–æ —É—Å–ª—É–≥–µ"
        variant="borderless"
      />
      <Button type="text" onClick={handleLocation}>
        –ü–æ –º–µ—Å—Ç—É
      </Button>
      <DatePicker placeholder="–ù–∞ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É" variant="borderless" />{" "}
      {/* TODO: validate date, placeholder color */}
      <TimePicker placeholder="–ù–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è" variant="borderless" />
    </div>
  );
};

export default Search;
